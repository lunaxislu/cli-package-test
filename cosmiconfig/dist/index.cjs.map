{"version":3,"sources":["../src/index.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport { cosmiconfig } from \"cosmiconfig\";\r\nimport path from \"path\";\r\nimport {\r\n  AssignmentExpression,\r\n  ObjectLiteralExpression,\r\n  Project,\r\n  PropertyAssignment,\r\n  SyntaxKind,\r\n  StringLiteral,\r\n} from \"ts-morph\";\r\nimport fs from \"fs-extra\";\r\n\r\n// 탐색기를 설정해 ESLint 설정 파일을 찾음\r\nconst explorer = cosmiconfig(\"eslint\", {\r\n  searchPlaces: [\r\n    \".eslintrc.json\",\r\n    \".eslintrc.cjs\",\r\n    \"eslint.config.js\",\r\n    \".eslint.config.js\",\r\n    \"eslint.config.mjs\",\r\n    \".eslint.config.mjs\",\r\n    \"eslint.config.cjs\",\r\n    \".eslint.config.cjs\",\r\n    \".eslintr.mjs\",\r\n    \".eslintrc.js\",\r\n  ],\r\n});\r\n\r\n// 설정 파일 로드 및 처리 함수\r\nasync function loadConfig() {\r\n  try {\r\n    const result = await explorer.search();\r\n    if (!result) return null;\r\n\r\n    const filepath = result.filepath;\r\n    const fileExtension = path.extname(filepath);\r\n    const config = result.config;\r\n\r\n    if (fileExtension === \".json\") {\r\n      // JSON 파일일 때 처리\r\n      config.rules = config.rules || {};\r\n      config.rules[\"react/prop-types\"] = \"off\";\r\n      await fs.writeJSON(filepath, config, { spaces: 2 });\r\n      return;\r\n    }\r\n\r\n    const project = new Project();\r\n    if (Array.isArray(config)) {\r\n      const sourceFile = project.addSourceFileAtPath(filepath);\r\n      const arrayExpressions = sourceFile.getDescendantsOfKind(\r\n        SyntaxKind.ArrayLiteralExpression,\r\n      );\r\n      let rulesPropertyFound = false;\r\n\r\n      if (arrayExpressions.length > 0) {\r\n        arrayExpressions.forEach((arrayExpression) => {\r\n          const objectLiterals = arrayExpression\r\n            .getElements()\r\n            .filter(\r\n              (element) =>\r\n                element.getKind() === SyntaxKind.ObjectLiteralExpression,\r\n            );\r\n\r\n          objectLiterals.forEach((objectLiteralExpression) => {\r\n            const objectLiteral = objectLiteralExpression.asKind(\r\n              SyntaxKind.ObjectLiteralExpression,\r\n            );\r\n\r\n            if (objectLiteral) {\r\n              const rulesProperty = objectLiteral.getProperty(\r\n                `rules`,\r\n              ) as PropertyAssignment;\r\n\r\n              if (rulesProperty) {\r\n                rulesPropertyFound = true;\r\n\r\n                const rulesInitializer = rulesProperty.getInitializer();\r\n\r\n                if (rulesInitializer) {\r\n                  const rulesObject = rulesInitializer.asKind(\r\n                    SyntaxKind.ObjectLiteralExpression,\r\n                  ) as ObjectLiteralExpression;\r\n                  const quoteChar = _getQuoteChar(rulesObject);\r\n\r\n                  // \"react/prop-types\" 규칙이 있는지 확인\r\n                  const propTypesRule = rulesObject.getProperty(\r\n                    `${quoteChar}react/prop-types${quoteChar}`,\r\n                  );\r\n\r\n                  if (!propTypesRule) {\r\n                    // 규칙이 없으면 추가\r\n                    rulesObject.addPropertyAssignment({\r\n                      name: `${quoteChar}react/prop-types${quoteChar}`,\r\n                      initializer: `${quoteChar}off${quoteChar}`,\r\n                    });\r\n                    console.log('\"react/prop-types\" 규칙이 추가되었습니다.');\r\n                  } else {\r\n                    console.log('\"react/prop-types\" 규칙이 이미 존재합니다.');\r\n                  }\r\n                }\r\n              }\r\n            }\r\n          });\r\n\r\n          // rules 속성이 없었으면 추가\r\n          if (!rulesPropertyFound) {\r\n            console.log(\"rulesProperty가 존재하지 않음. 새로 생성합니다.\");\r\n\r\n            // 첫 번째 객체 리터럴에 rules: {} 추가\r\n            const firstObjectLiteral = arrayExpression\r\n              .getElements()[0]\r\n              .asKind(SyntaxKind.ObjectLiteralExpression);\r\n            if (firstObjectLiteral) {\r\n              const quoteChar = _getQuoteChar(firstObjectLiteral);\r\n              firstObjectLiteral.addPropertyAssignment({\r\n                name: `${quoteChar}rules${quoteChar}`,\r\n                initializer: `{ ${quoteChar}react/prop-types${quoteChar}: ${quoteChar}off${quoteChar} }`,\r\n              });\r\n              console.log('\"rules\" 속성이 새로 추가되었습니다.');\r\n            }\r\n          }\r\n        });\r\n      }\r\n      await sourceFile.save();\r\n      return;\r\n    }\r\n\r\n    const sourceFile = project.addSourceFileAtPath(filepath);\r\n    const objectLiterals = sourceFile.getDescendantsOfKind(\r\n      SyntaxKind.ObjectLiteralExpression,\r\n    );\r\n\r\n    let rulesAdded = false; // 규칙 추가 여부 추적\r\n\r\n    objectLiterals.forEach((objectLiteral) => {\r\n      if (objectLiteral instanceof ObjectLiteralExpression) {\r\n        const quoteChar = _getQuoteChar(objectLiteral);\r\n        const rulesProperty = objectLiteral.getProperty(\r\n          `rules`,\r\n        ) as PropertyAssignment;\r\n\r\n        if (rulesProperty) {\r\n          const rulesInitializer =\r\n            rulesProperty.getInitializer() as ObjectLiteralExpression;\r\n\r\n          const quoteChar = _getQuoteChar(rulesInitializer);\r\n          if (rulesInitializer) {\r\n            // \"react/prop-types\" 속성 확인\r\n            const existingProperty = rulesInitializer.getProperty(\r\n              `${quoteChar}react/prop-types${quoteChar}`,\r\n            ) as PropertyAssignment | undefined;\r\n            console.log();\r\n            if (!existingProperty) {\r\n              rulesInitializer.addPropertyAssignment({\r\n                name: `${quoteChar}react/prop-types${quoteChar}`,\r\n                initializer: `${quoteChar}off${quoteChar}`,\r\n              });\r\n            }\r\n            if (existingProperty) {\r\n              existingProperty.setInitializer(`${quoteChar}off${quoteChar}`);\r\n              console.log(\r\n                '\"react/prop-types\" 규칙의 값을 \"off\"로 설정했습니다.',\r\n              );\r\n            }\r\n            rulesAdded = true;\r\n          }\r\n        }\r\n      }\r\n    });\r\n\r\n    // 모든 objectLiteral을 순회한 후 rulesBoolean이 false라면 새로운 rules 속성 추가\r\n    if (!rulesAdded) {\r\n      const firstObjectLiteral = objectLiterals[0] as ObjectLiteralExpression;\r\n      const quoteChar = _getQuoteChar(firstObjectLiteral);\r\n      firstObjectLiteral.addPropertyAssignment({\r\n        name: `${quoteChar}rules${quoteChar}`,\r\n        initializer: `{ ${quoteChar}react/prop-types${quoteChar}: ${quoteChar}off${quoteChar} }`,\r\n      });\r\n      console.log('\"rules\" 속성이 새로 추가되었습니다.');\r\n    }\r\n\r\n    // 변경사항 저장\r\n    await sourceFile.save();\r\n  } catch (error) {\r\n    console.error(\"Error loading config:\", error);\r\n  }\r\n}\r\n\r\nloadConfig();\r\nexport function _getQuoteChar(configObject: ObjectLiteralExpression): string {\r\n  return configObject\r\n    .getFirstDescendantByKind(SyntaxKind.StringLiteral)\r\n    ?.getQuoteKind() === \"'\"\r\n    ? \"'\"\r\n    : '\"';\r\n}\r\n"],"mappings":"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","names":["path","fs","sourceFile","objectLiterals","quoteChar"]}