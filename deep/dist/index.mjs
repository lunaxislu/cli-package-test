#!/usr/bin/env node
import{Command as z}from"commander";import d from"path";import u from"fs-extra";function y(){let e=d.join("package.json");return u.readJSONSync(e)}async function j(e){let n=d.join(e,"package.json");return u.readJSON(n)}import{promises as v}from"fs";import R from"path";import{Command as U}from"commander";import{execa as m}from"execa";import _ from"prompts";import C from"ora";function h(e,n){return C({text:e,isSilent:n?.silent})}import x from"path";import{loadConfig as X}from"tsconfig-paths";import k from"fs-extra";import P from"fast-glob";import{detect as M}from"@antfu/ni";async function w(e){let n=await M({programmatic:!0,cwd:e});return console.log(n),n==="yarn@berry"?"yarn":n==="pnpm@6"?"pnpm":n==="bun"?"bun":n??"npm"}var T=["**/node_modules/**",".next","public","dist","build"];async function D(e){let[n,s,a,p]=await Promise.all([k.pathExists(x.resolve(e,"src")),E(e),P.glob("next.config.*",{cwd:e,deep:1}),w(e)]),t=a.length>0,c=!1;return t&&(c=await k.pathExists(x.resolve(e,`${n?"src/":""}app`))),{packageManager:p,isSrcDir:n,isTsx:s,isNext:t,isUsingAppDir:c}}async function E(e){return(await P.glob("tsconfig.*",{cwd:e,deep:1,ignore:T})).length>0}import{cyan as O,green as N,red as A,yellow as $}from"kleur/colors";var i={error:A,warn:$,info:O,success:N};var o={error(...e){console.log(i.error(e.join(" ")))},warn(...e){console.log(i.warn(e.join(" ")))},info(...e){console.log(i.info(e.join(" ")))},success(...e){console.log(i.success(e.join(" ")))},log(...e){console.log(e.join(" "))},break(){console.log("")}};var r="^1.10.4",J=new U().name("init").description("Initialize your project and setup Calendar component").action(async()=>{let e=process.cwd(),n=h("Detecting project info...").start();try{let s=await D(e);if(!s)return o.error("you must install packageManager : npm , pnpm or yarn",process.exit(1));n.succeed("Project info detected:"),o.info(JSON.stringify(s,null,2));let a=await j(e),p=a.dependencies||{},t=s.packageManager,c=s.isTsx,f=p.dayjs;f?f<r?(o.info(`Day.js version is lower than required. Updating to ${r}...`),await m(t,[t==="npm"?"install":"add",`dayjs@${r}`],{cwd:e,stdio:"inherit"}),o.success(`Day.js updated to ${r}.`)):o.success("Day.js is up to date."):(o.info("Day.js is not installed. Installing..."),await m(t,[t==="npm"?"install":"add",`dayjs@${r}`],{cwd:e,stdio:"inherit"}),o.success(`Day.js@${r} installed.`)),c&&((a.devDependencies||{})["@types/css-modules"]?o.success("@types/css-modules is already installed."):(o.info("Installing @types/css-modules for CSS Modules..."),await m(t,[t==="npm"?"install":"add","--save-dev","@types/css-modules"],{cwd:e,stdio:"inherit"}),o.success("@types/css-modules installed.")));let l=R.resolve(e,"component.json"),b=await v.access(l).then(()=>!0).catch(()=>!1),g=!0;if(b&&(g=(await _({type:"confirm",name:"overwrite",message:"component.json already exists. Do you want to overwrite it?",initial:!1})).overwrite),!g)return o.info("component.json file was not overwritten."),o.info("Execution terminated.");let S={name:"Calendar",version:"1.0.0",description:"A customizable calendar component using Day.js",packageManager:s.packageManager,isSrcDir:s.isSrcDir,isTsx:s.isTsx,isNext:s.isNext,isUsingAppDir:s.isUsingAppDir,calendar:{path:"./src/calendar",cssModule:!0}};await v.writeFile(l,JSON.stringify(S,null,2),"utf8"),o.success(`component.json has been created at ${l}`)}catch{n.fail("Failed to initialize the project"),o.error("Failed to initialize the project")}});async function F(){let e=y(),n=new z().name("deep-cli").description("add components and dependencies to your project").version(e.version||"1.0.0","-v, --version","display the version number");n.addCommand(J),n.parse()}F();
//# sourceMappingURL=index.mjs.map