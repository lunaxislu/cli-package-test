{"version":3,"sources":["../src/index.ts","../src/util/get-package-info.ts","../src/command/init.ts","../src/util/loading.ts","../src/util/get-project-info.ts","../src/util/get-package-manager.ts","../src/util/color.ts","../src/util/logger.ts"],"sourcesContent":["#!/usr/bin/env node\r\nimport { Command } from \"commander\";\r\nimport { getPackageInfo } from \"./util/get-package-info\";\r\nimport { init } from \"./command/init\";\r\n\r\nasync function main() {\r\n  const packageInfo = getPackageInfo();\r\n  const program = new Command()\r\n    .name(\"deep-cli\")\r\n    .description(\"add components and dependencies to your project\")\r\n    .version(\r\n      packageInfo.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\",\r\n    );\r\n\r\n  program.addCommand(init);\r\n  program.parse();\r\n}\r\n\r\nmain();\r\n","import path from \"path\";\r\nimport fs from \"fs-extra\";\r\nimport { type PackageJson } from \"type-fest\";\r\n\r\nexport function getPackageInfo(): PackageJson {\r\n  const packageJsonPath = path.join(\"package.json\");\r\n\r\n  return fs.readJSONSync(packageJsonPath);\r\n}\r\n\r\n/**\r\n * \r\n * \r\n * \r\n * const packageInfo = getPackageInfo();\r\n  console.log(packageInfo);\r\n * \r\n{\r\n  name: 'ts',\r\n  version: '1.0.0',\r\n  description: '',\r\n  main: 'index.js',\r\n  scripts: { test: 'node dist/index.js', build: 'tsc' },\r\n  keywords: [],\r\n  author: '',\r\n  license: 'ISC',\r\n  devDependencies: {\r\n    '@types/fs-extra': '^11.0.4',\r\n    '@types/node': '^22.5.4',\r\n    typescript: '^5.5.4'\r\n  },\r\n  dependencies: {\r\n    '@antfu/ni': '^0.23.0',\r\n    'fs-extra': '^11.2.0',\r\n    'type-fest': '^4.26.0'\r\n  }\r\n}\r\n */\r\nexport async function readPackageJson(cwd: string): Promise<PackageJson> {\r\n  const packageJsonPath = path.join(cwd, \"package.json\");\r\n  return fs.readJSON(packageJsonPath);\r\n}\r\n","// src/commands/init.ts\r\nimport { promises as fs } from \"fs\";\r\nimport path from \"path\";\r\nimport { Command } from \"commander\";\r\n\r\nimport { execa } from \"execa\";\r\n\r\nimport prompts from \"prompts\";\r\nimport { loading } from \"../util/loading\";\r\nimport { getProjectInfo } from \"../util/get-project-info\";\r\nimport { logger } from \"../util/logger\";\r\nimport { readPackageJson } from \"../util/get-package-info\";\r\n\r\nconst REQUIRED_DAYJS_VERSION = \"^1.10.4\";\r\n\r\nexport const init = new Command()\r\n  .name(\"init\")\r\n  .description(\"Initialize your project and setup Calendar component\")\r\n  .action(async () => {\r\n    const cwd = process.cwd();\r\n    const spinner = loading(\"Detecting project info...\").start();\r\n\r\n    try {\r\n      // 1. 프로젝트 정보를 수집\r\n      const projectInfo = await getProjectInfo(cwd);\r\n      if (!projectInfo) {\r\n        return logger.error(\r\n          \"you must install packageManager : npm , pnpm or yarn\",\r\n          process.exit(1),\r\n        );\r\n      }\r\n\r\n      spinner.succeed(\"Project info detected:\");\r\n      logger.info(JSON.stringify(projectInfo, null, 2));\r\n\r\n      // 2. 프로젝트의 package.json 확인\r\n      const projectPackageJson = await readPackageJson(cwd);\r\n      const projectDependencies = projectPackageJson.dependencies || {};\r\n      const packageManager = projectInfo.packageManager;\r\n      const isTsx = projectInfo.isTsx;\r\n\r\n      // 3. Day.js 설치 확인 및 업데이트\r\n      const currentDayjsVersion = projectDependencies.dayjs;\r\n\r\n      if (!currentDayjsVersion) {\r\n        // Day.js가 없으면 설치\r\n        logger.info(\"Day.js is not installed. Installing...\");\r\n        await execa(\r\n          packageManager,\r\n          [\r\n            packageManager === \"npm\" ? \"install\" : \"add\",\r\n            `dayjs@${REQUIRED_DAYJS_VERSION}`,\r\n          ],\r\n          { cwd, stdio: \"inherit\" },\r\n        );\r\n        logger.success(`Day.js@${REQUIRED_DAYJS_VERSION} installed.`);\r\n      } else if (currentDayjsVersion < REQUIRED_DAYJS_VERSION) {\r\n        // Day.js가 설치되어 있지만 버전이 낮으면 업데이트\r\n        logger.info(\r\n          `Day.js version is lower than required. Updating to ${REQUIRED_DAYJS_VERSION}...`,\r\n        );\r\n        await execa(\r\n          packageManager,\r\n          [\r\n            packageManager === \"npm\" ? \"install\" : \"add\",\r\n            `dayjs@${REQUIRED_DAYJS_VERSION}`,\r\n          ],\r\n          { cwd, stdio: \"inherit\" },\r\n        );\r\n        logger.success(`Day.js updated to ${REQUIRED_DAYJS_VERSION}.`);\r\n      } else {\r\n        logger.success(\"Day.js is up to date.\");\r\n      }\r\n\r\n      // 4. TypeScript 프로젝트일 경우 CSS 모듈 타입 확인 및 설치\r\n      if (isTsx) {\r\n        const devDependencies = projectPackageJson.devDependencies || {};\r\n        const isCssModulesTypesInstalled =\r\n          devDependencies[\"@types/css-modules\"];\r\n\r\n        if (!isCssModulesTypesInstalled) {\r\n          logger.info(\"Installing @types/css-modules for CSS Modules...\");\r\n          await execa(\r\n            packageManager,\r\n            [\r\n              packageManager === \"npm\" ? \"install\" : \"add\",\r\n              \"--save-dev\",\r\n              \"@types/css-modules\",\r\n            ],\r\n            { cwd, stdio: \"inherit\" },\r\n          );\r\n          logger.success(\"@types/css-modules installed.\");\r\n        } else {\r\n          logger.success(\"@types/css-modules is already installed.\");\r\n        }\r\n      }\r\n\r\n      // 5. component.json 파일 생성 또는 덮어쓰기 여부 확인\r\n      const componentJsonPath = path.resolve(cwd, \"component.json\");\r\n\r\n      const fileExists = await fs\r\n        .access(componentJsonPath)\r\n        .then(() => true)\r\n        .catch(() => false);\r\n\r\n      let overwrite = true; // 기본값은 덮어쓰기 허용\r\n\r\n      if (fileExists) {\r\n        const response = await prompts({\r\n          type: \"confirm\",\r\n          name: \"overwrite\",\r\n          message:\r\n            \"component.json already exists. Do you want to overwrite it?\",\r\n          initial: false,\r\n        });\r\n\r\n        overwrite = response.overwrite;\r\n      }\r\n\r\n      if (!overwrite) {\r\n        logger.info(\"component.json file was not overwritten.\");\r\n        return logger.info(\"Execution terminated.\");\r\n      }\r\n\r\n      // 6. component.json 파일 생성\r\n      const componentJson = {\r\n        name: \"Calendar\",\r\n        version: \"1.0.0\",\r\n        description: \"A customizable calendar component using Day.js\",\r\n        packageManager: projectInfo.packageManager,\r\n        isSrcDir: projectInfo.isSrcDir,\r\n        isTsx: projectInfo.isTsx,\r\n        isNext: projectInfo.isNext,\r\n        isUsingAppDir: projectInfo.isUsingAppDir,\r\n        calendar: {\r\n          path: \"./src/calendar\",\r\n          cssModule: true,\r\n        },\r\n      };\r\n\r\n      await fs.writeFile(\r\n        componentJsonPath,\r\n        JSON.stringify(componentJson, null, 2),\r\n        \"utf8\",\r\n      );\r\n      logger.success(`component.json has been created at ${componentJsonPath}`);\r\n    } catch (error) {\r\n      spinner.fail(\"Failed to initialize the project\");\r\n      logger.error(\"Failed to initialize the project\");\r\n    }\r\n  });\r\n","import ora, { type Options } from \"ora\";\r\n\r\nexport function loading(\r\n  text: Options[\"text\"],\r\n  options?: {\r\n    silent?: boolean;\r\n  },\r\n) {\r\n  return ora({\r\n    text,\r\n    isSilent: options?.silent, // silent가 true일 때 스피너를 출력하지 않음\r\n  });\r\n}\r\n","import path from \"path\";\r\nimport { loadConfig } from \"tsconfig-paths\";\r\nimport fs from \"fs-extra\";\r\nimport fg from \"fast-glob\";\r\nimport { getPackageManager } from \"./get-package-manager\";\r\n\r\nconst PROJECT_SHARED_IGNORE = [\r\n  \"**/node_modules/**\",\r\n  \".next\",\r\n  \"public\",\r\n  \"dist\",\r\n  \"build\",\r\n];\r\n\r\nexport async function getTsConfigAliasPrefix(cwd: string) {\r\n  const tsConfig = loadConfig(cwd);\r\n\r\n  if (tsConfig?.resultType === \"failed\" || !tsConfig?.paths) {\r\n    return null;\r\n  }\r\n  console.log(tsConfig.baseUrl);\r\n  // This assume that the first alias is the prefix.\r\n  for (const [alias, paths] of Object.entries(tsConfig.paths)) {\r\n    if (\r\n      paths.includes(\"./*\") ||\r\n      paths.includes(\"./src/*\") ||\r\n      paths.includes(\"./app/*\") ||\r\n      paths.includes(\"./resources/js/*\") // Laravel.\r\n    ) {\r\n      return alias.at(0) ?? null;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\nexport async function getProjectInfo(cwd: string) {\r\n  const [isSrcDir, isTsx, configFiles, packageManager] = await Promise.all([\r\n    fs.pathExists(path.resolve(cwd, \"src\")),\r\n    isTypeScriptProject(cwd),\r\n    fg.glob(\"next.config.*\", {\r\n      cwd,\r\n      deep: 1,\r\n    }),\r\n    getPackageManager(cwd),\r\n  ]);\r\n\r\n  const isNext = configFiles.length > 0;\r\n\r\n  let isUsingAppDir = false;\r\n\r\n  if (isNext) {\r\n    isUsingAppDir = await fs.pathExists(\r\n      path.resolve(cwd, `${isSrcDir ? \"src/\" : \"\"}app`),\r\n    );\r\n  }\r\n\r\n  return {\r\n    packageManager,\r\n    isSrcDir, // src 디렉터리 존재 여부\r\n    isTsx, // TypeScript 프로젝트 여부\r\n    isNext, // Next.js 프로젝트 여부\r\n    isUsingAppDir, // nextjs appRouter에서 'src/app' | '/app'\r\n  };\r\n}\r\nexport async function isTypeScriptProject(cwd: string) {\r\n  // vite는 tsconfig가 3개임\r\n  const files = await fg.glob(\"tsconfig.*\", {\r\n    cwd,\r\n    deep: 1,\r\n    ignore: PROJECT_SHARED_IGNORE,\r\n  });\r\n\r\n  return files.length > 0;\r\n}\r\n\r\nexport async function getTsConfig() {\r\n  try {\r\n    const tsconfigPath = path.join(\"tsconfig.json\");\r\n    const tsconfig = await fs.readJSON(tsconfigPath);\r\n\r\n    if (!tsconfig) {\r\n      throw new Error(\"tsconfig.json is missing\");\r\n    }\r\n\r\n    return tsconfig;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n","import { detect } from \"@antfu/ni\";\r\nexport async function getPackageManager(\r\n  targetDir: string,\r\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\r\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\r\n  console.log(packageManager);\r\n  if (packageManager === \"yarn@berry\") return \"yarn\";\r\n  if (packageManager === \"pnpm@6\") return \"pnpm\";\r\n  if (packageManager === \"bun\") return \"bun\";\r\n\r\n  return packageManager ?? \"npm\";\r\n}\r\n","import { cyan, green, red, yellow } from \"kleur/colors\";\r\n\r\nexport const highlighter = {\r\n  error: red,\r\n  warn: yellow,\r\n  info: cyan,\r\n  success: green,\r\n};\r\n","import { highlighter } from \"./color\";\r\n\r\nexport const logger = {\r\n  error(...args: unknown[]) {\r\n    console.log(highlighter.error(args.join(\" \")));\r\n  },\r\n  warn(...args: unknown[]) {\r\n    console.log(highlighter.warn(args.join(\" \")));\r\n  },\r\n  info(...args: unknown[]) {\r\n    console.log(highlighter.info(args.join(\" \")));\r\n  },\r\n  success(...args: unknown[]) {\r\n    console.log(highlighter.success(args.join(\" \")));\r\n  },\r\n  log(...args: unknown[]) {\r\n    console.log(args.join(\" \"));\r\n  },\r\n  break() {\r\n    console.log(\"\");\r\n  },\r\n};\r\n"],"mappings":"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","names":["Command","path","fs","getPackageInfo","packageJsonPath","readPackageJson","cwd","fs","path","Command","execa","prompts","ora","loading","text","options","path","loadConfig","fs","fg","detect","getPackageManager","targetDir","packageManager","PROJECT_SHARED_IGNORE","getProjectInfo","cwd","isSrcDir","isTsx","configFiles","packageManager","fs","path","isTypeScriptProject","fg","getPackageManager","isNext","isUsingAppDir","PROJECT_SHARED_IGNORE","cyan","green","red","yellow","highlighter","logger","args","highlighter","REQUIRED_DAYJS_VERSION","init","Command","cwd","spinner","loading","projectInfo","getProjectInfo","logger","projectPackageJson","readPackageJson","projectDependencies","packageManager","isTsx","currentDayjsVersion","execa","componentJsonPath","path","fileExists","fs","overwrite","prompts","componentJson","main","packageInfo","getPackageInfo","program","Command","init"]}