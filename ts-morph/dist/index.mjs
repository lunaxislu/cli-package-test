#!/usr/bin/env node
import{Command as x}from"commander";import{Command as d}from"commander";import g from"path";import r,{pathExists as O}from"fs-extra";import f from"fast-glob";import F from"fs-extra";import{Project as m,QuoteKind as W,SyntaxKind as i}from"ts-morph";var u=["**/node_modules/**",".next","public","dist","build"];async function a(e){let t=await f.glob("tailwind.config.*",{cwd:e,deep:3,ignore:u});return t.length?g.join(e,t[0]):null}async function c(e){try{let t=await r.readFile(e,"utf-8");t=t.replace("content: [],",`content: [
"./pages/**/*.{js,ts,jsx,tsx,mdx}",
"./components/**/*.{js,ts,jsx,tsx,mdx}",
"./app/**/*.{js,ts,jsx,tsx,mdx}"
],`),await r.writeFile(e,t,"utf8"),console.log("Tailwind config updated successfully!")}catch(t){console.log(t)}}async function p(e){try{let n=new m().addSourceFileAtPath(e),j=n.getDescendantsOfKind(i.ObjectLiteralExpression).find(o=>o.getProperties().some(s=>s.isKind(i.PropertyAssignment)&&s.getName()==="content"));n.getDescendantsOfKind(i.ObjectLiteralExpression).forEach(o=>{console.log("Found object literal:",o.getText())})}catch{}}var l=new d().name("init").action(async()=>{let e=process.cwd(),t=await a(e);if(t){let n=await c(t);await p(t)}});async function w(){let e=new x;e.name("ts-morph-test"),e.addCommand(l),e.parse()}w();
//# sourceMappingURL=index.mjs.map