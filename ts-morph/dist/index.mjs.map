{"version":3,"sources":["../src/index.ts","../src/command/init.ts","../src/util/get-project-info.ts","../src/util/get-package-info.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from \"commander\";\r\nimport { init } from \"./command/init\";\r\n\r\nasync function main() {\r\n  const program = new Command();\r\n  program.name(\"ts-morph-test\");\r\n\r\n  program.addCommand(init);\r\n  program.parse();\r\n}\r\n\r\nmain();\r\n","import { Command } from \"commander\";\r\nimport { getProjectInfo, getTailwindCssFile } from \"../util/get-project-info\";\r\n\r\nexport const init = new Command().name(\"init\").action(async () => {\r\n  const cwd = process.cwd();\r\n  //   const files = await getFiles(cwd); //fast-globe lib\r\n  //   const pathResolve = await isTypeScriptProject(cwd); // fs-extra - pathExists method\r\n  //   const tsConfig = await getTsConfig(); // fs-extra - readJSON method\r\n  //   const tailwindPath = await getTailwindConfigFile(cwd);\r\n  //   let resolveTailwindPath;\r\n\r\n  //   if (tailwindPath) {\r\n  //     resolveTailwindPath = path.resolve(cwd, tailwindPath);\r\n  //     console.log(\"üöÄ ~ init ~ tailwindFile:\", resolveTailwindPath);\r\n\r\n  //   const projectInfo = await getProjectInfo(cwd);\r\n\r\n  const result = await getTailwindCssFile(cwd);\r\n  console.log(\"üöÄ ~ result:\", result);\r\n});\r\n","import path from \"path\";\r\nimport fs, { pathExists } from \"fs-extra\";\r\nimport fg from \"fast-glob\";\r\nimport { getPackageManager } from \"./get-package-info\";\r\nimport { Framework, FRAMEWORKS } from \"./framwork\";\r\nimport { JsonValue } from \"type-fest\";\r\n\r\nconst PROJECT_SHARED_IGNORE = [\r\n  \"**/node_modules/**\",\r\n  \".next\",\r\n  \"public\",\r\n  \"dist\",\r\n  \"build\",\r\n];\r\nexport type ProjectType = {\r\n  framework: Framework;\r\n  isUsingAppDir: boolean;\r\n  isSrcDir: boolean;\r\n  isTsx: boolean;\r\n  configFiles: string[];\r\n  packageManager: JsonValue;\r\n};\r\nexport async function getProjectInfo(cwd: string) {\r\n  const [isSrcDir, isTsx, configFiles, packageManager] = await Promise.all([\r\n    fs.pathExists(path.resolve(cwd, \"src\")),\r\n    isTypeScriptProject(cwd),\r\n    fg.glob(\"next.config.*\", {\r\n      cwd,\r\n      deep: 1,\r\n    }),\r\n    getPackageManager(cwd),\r\n  ]);\r\n\r\n  const isNext = configFiles.length > 0; // fgÎ°ú pattern Ï∞æÏúºÎ©¥ [] ÏïàÏóê Îì§Ïñ¥Ïò§Í∏∞Ïóê\r\n\r\n  const projectType: ProjectType = {\r\n    framework: FRAMEWORKS[\"react.js\"],\r\n    isUsingAppDir: false,\r\n    isSrcDir,\r\n    isTsx,\r\n    configFiles,\r\n    packageManager,\r\n  };\r\n\r\n  if (isNext) {\r\n    projectType.isUsingAppDir = await fs.pathExists(\r\n      path.resolve(cwd, `${isSrcDir ? \"src/\" : \"\"}app`)\r\n    );\r\n    projectType.framework = projectType.isUsingAppDir\r\n      ? FRAMEWORKS[\"next-app\"]\r\n      : FRAMEWORKS[\"next-pages\"];\r\n  }\r\n  const tailwindConfigFile = await getTailwindConfigFile(cwd);\r\n  const resolveConfig = {\r\n    ...projectType,\r\n    ...projectType.framework,\r\n    tailwindConfigFile,\r\n  };\r\n\r\n  return resolveConfig;\r\n}\r\n\r\nexport async function getFiles(cwd: string) {\r\n  const files = await fg.glob(\"**/*\", {\r\n    cwd,\r\n    deep: 2,\r\n    ignore: PROJECT_SHARED_IGNORE,\r\n  });\r\n  /**\r\n   * \r\n   * deep :3 Ïùº Îïå\r\n   * [\r\n  'package.json',\r\n  'pnpm-lock.yaml',\r\n  'tsconfig.json',\r\n  'tsup.config.ts',\r\n  'src/index.ts',\r\n  'src/command/init.ts',\r\n  'src/util/get-project-info.ts',\r\n  'src/util/resolve-path.ts'\r\n]\r\n\r\n  deep: 1Ïùº Îïå \r\n  [ 'package.json', 'pnpm-lock.yaml', 'tsconfig.json', 'tsup.config.ts' ] \r\n\r\n  deep: 2Ïùº Îïå\r\n   [\r\n  'package.json',\r\n  'pnpm-lock.yaml',\r\n  'tsconfig.json',\r\n  'tsup.config.ts',\r\n  'src/index.ts'\r\n]\r\n\r\n */\r\n  return files;\r\n}\r\n\r\n//typescript ÌîÑÎ°úÏ†ùÌä∏Ïù∏ÏßÄ\r\nexport async function isTypeScriptProject(cwd: string) {\r\n  // Check if cwd has a tsconfig.json file.\r\n  return pathExists(path.resolve(cwd, \"tsconfig.json\"));\r\n}\r\n\r\n// tsconfig Í∞ÄÏ†∏Ïò§Í∏∞\r\nexport async function getTsConfig() {\r\n  try {\r\n    const tsconfigPath = path.join(\"tsconfig.json\");\r\n    const tsconfig = await fs.readJSON(tsconfigPath);\r\n\r\n    if (!tsconfig) {\r\n      throw new Error(\"tsconfig.json is missing\");\r\n    }\r\n    0;\r\n    return tsconfig;\r\n  } catch (error) {\r\n    return null;\r\n  }\r\n}\r\n\r\n// tailwindconfig ÌååÏùº Í≤ΩÎ°ú Í∞ÄÏ†∏Ïò§Í∏∞\r\nexport async function getTailwindConfigFile(cwd: string) {\r\n  const files = await fg.glob(\"tailwind.config.*\", {\r\n    cwd,\r\n    deep: 3,\r\n    ignore: PROJECT_SHARED_IGNORE,\r\n  });\r\n\r\n  if (!files.length) {\r\n    return null;\r\n  }\r\n\r\n  return files[0];\r\n}\r\n\r\nexport async function getTailwindCssFile(cwd: string) {\r\n  const files = await fg.glob(\"**/*.css\", {\r\n    cwd,\r\n    deep: 5,\r\n    ignore: PROJECT_SHARED_IGNORE,\r\n  });\r\n\r\n  if (!files.length) {\r\n    return null;\r\n  }\r\n\r\n  for (const file of files) {\r\n    const contents = await fs.readFile(path.resolve(cwd, file), \"utf8\");\r\n\r\n    console.log(contents);\r\n    if (contents.includes(\"@tailwind base\")) {\r\n      return file;\r\n    }\r\n  }\r\n\r\n  return null;\r\n}\r\n","import path from \"path\";\r\nimport fs from \"fs-extra\";\r\nimport { type PackageJson } from \"type-fest\";\r\nexport async function getPackageManager(cwd: string): Promise<PackageJson> {\r\n  const packageJsonPath = path.join(cwd, \"package.json\");\r\n  return fs.readJSON(packageJsonPath);\r\n}\r\n"],"mappings":";AAEA,OAAS,WAAAA,MAAe,YCFxB,OAAS,WAAAC,MAAe,YCAxB,OAAOC,MAAU,OACjB,OAAOC,GAAM,cAAAC,MAAkB,WAC/B,OAAOC,MAAQ,YCDf,OAAOC,MAAQ,WDMf,IAAMC,EAAwB,CAC5B,qBACA,QACA,SACA,OACA,OACF,EA0HA,eAAsBC,EAAmBC,EAAa,CACpD,IAAMC,EAAQ,MAAMC,EAAG,KAAK,WAAY,CACtC,IAAAF,EACA,KAAM,EACN,OAAQG,CACV,CAAC,EAED,GAAI,CAACF,EAAM,OACT,OAAO,KAGT,QAAWG,KAAQH,EAAO,CACxB,IAAMI,EAAW,MAAMC,EAAG,SAASC,EAAK,QAAQP,EAAKI,CAAI,EAAG,MAAM,EAGlE,GADA,QAAQ,IAAIC,CAAQ,EAChBA,EAAS,SAAS,gBAAgB,EACpC,OAAOD,CAEX,CAEA,OAAO,IACT,CDzJO,IAAMI,EAAO,IAAIC,EAAQ,EAAE,KAAK,MAAM,EAAE,OAAO,SAAY,CAChE,IAAMC,EAAM,QAAQ,IAAI,EAalBC,EAAS,MAAMC,EAAmBF,CAAG,EAC3C,QAAQ,IAAI,sBAAgBC,CAAM,CACpC,CAAC,EDdD,eAAeE,GAAO,CACpB,IAAMC,EAAU,IAAIC,EACpBD,EAAQ,KAAK,eAAe,EAE5BA,EAAQ,WAAWE,CAAI,EACvBF,EAAQ,MAAM,CAChB,CAEAD,EAAK","names":["Command","Command","path","fs","pathExists","fg","fs","PROJECT_SHARED_IGNORE","getTailwindCssFile","cwd","files","fg","PROJECT_SHARED_IGNORE","file","contents","fs","path","init","Command","cwd","result","getTailwindCssFile","main","program","Command","init"]}