{"version":3,"sources":["../src/index.ts","../src/util/get-package-info.ts","../src/command/init.ts","../src/util/get-project-info.ts","../src/util/path-resolve.ts"],"sourcesContent":["#!/usr/bin/env node\r\n\r\nimport { Command } from \"commander\";\r\nimport { getPackageInfo } from \"./util/get-package-info\";\r\nimport { init } from \"./command/init\";\r\nimport { getComponentJSonInfo } from \"./util/path-resolve\";\r\n\r\nfunction main() {\r\n  const packageInfo = getPackageInfo();\r\n  const pathResolve = getComponentJSonInfo(); // 컴포넌트 경로 설정\r\n\r\n  const program = new Command();\r\n\r\n  program\r\n    .name(\"cli-button\")\r\n    .description(\"add components to your project\")\r\n    .version(\r\n      packageInfo.version || \"1.0.0\",\r\n      \"-v, --version\",\r\n      \"display the version number\"\r\n    )\r\n    .command(\"add <button>\")\r\n    .action((button) => init(button, pathResolve));\r\n\r\n  program.parse();\r\n}\r\n\r\nmain();\r\n","import path from \"path\";\r\nimport fs from \"fs-extra\";\r\nimport { type PackageJson } from \"type-fest\";\r\n\r\nexport function getPackageInfo(): PackageJson {\r\n  const packageJsonPath = path.join(\"package.json\");\r\n\r\n  return fs.readJSONSync(packageJsonPath);\r\n}\r\n\r\nexport async function readPackageJson(cwd: string): Promise<PackageJson> {\r\n  const packageJsonPath = path.join(cwd, \"package.json\");\r\n  return fs.readJSON(packageJsonPath);\r\n}\r\n\r\nexport function validateFramework(): boolean {\r\n  const packageJson = getPackageInfo();\r\n  const dependencies = packageJson.dependencies || {};\r\n  const devDependencies = packageJson.devDependencies || {};\r\n\r\n  const allDependencies = { ...dependencies, ...devDependencies };\r\n\r\n  const isReact = !!allDependencies[\"react\"];\r\n  const isNext = !!allDependencies[\"next\"];\r\n  let validation = true;\r\n\r\n  if (!isReact && !isNext) validation = false;\r\n\r\n  return validation;\r\n}\r\n","import path from \"path\";\r\nimport {\r\n  getProjectPackageManager,\r\n  isTypescriptProject,\r\n} from \"../util/get-project-info\";\r\nimport kleur from \"kleur\";\r\nimport fs from \"fs-extra\";\r\nimport { readPackageJson, validateFramework } from \"../util/get-package-info\";\r\nimport { execa } from \"execa\";\r\nimport { ComponentJson } from \"../util/path-resolve\";\r\n\r\nexport async function init(component: string, filePathResolve: ComponentJson) {\r\n  console.log(kleur.cyan(\"Installing....\"));\r\n  const cwd = process.cwd();\r\n  const srcPath = path.resolve(cwd, \"src\");\r\n  const componentsPath = path.resolve(srcPath, \"components\");\r\n  const uiPath = path.resolve(componentsPath, \"ui\");\r\n  try {\r\n    const [packageManager, packageJson, isTsx] = await Promise.all([\r\n      getProjectPackageManager(cwd),\r\n      readPackageJson(cwd),\r\n      isTypescriptProject(cwd),\r\n    ]);\r\n    const dependency = packageJson.dependencies || {};\r\n    const devDependency = packageJson.devDependencies || {};\r\n\r\n    const isValidtedFrameWork = validateFramework();\r\n    // React, Next 검사\r\n    if (!isValidtedFrameWork) {\r\n      throw new Error(\r\n        kleur.red(\r\n          \"This project is not a React or Next.js project.\\nPlease use this CLI in a React or Next.js project.\"\r\n        )\r\n      );\r\n    }\r\n    const fileExtension = isTsx ? \"tsx\" : \"jsx\";\r\n    const pathResolveKey = isTsx\r\n      ? \"typescript\"\r\n      : (\"javascript\" as keyof ComponentJson);\r\n\r\n    console.log(\r\n      kleur.blue(\r\n        `Project type: ${\r\n          isTsx ? \"TypeScript\" : \"JavaScript\"\r\n        }. Using .${fileExtension} files.`\r\n      )\r\n    );\r\n    // src 폴더가 있는지 확인, 없으면 생성\r\n    await fs.mkdir(uiPath, { recursive: true });\r\n\r\n    // 파일 복사\r\n    const files = filePathResolve[pathResolveKey].files;\r\n    for (const file of files) {\r\n      const sourcePath = path.resolve(cwd, file.path);\r\n      const destinationPath = path.join(uiPath, `${file.name}`);\r\n      await fs.copyFile(sourcePath, destinationPath);\r\n      console.log(kleur.green(`Copied ${file.name} to ${destinationPath}`));\r\n    }\r\n\r\n    // ts일때, css-module 타입 지원 검사\r\n    if (isTsx && !devDependency[\"@types/css-modules\"]) {\r\n      console.log(\r\n        kleur.yellow(\"@types/css-modules is not installed. Installing...\")\r\n      );\r\n      try {\r\n        await execa(\r\n          packageManager,\r\n          [packageManager === \"npm\" ? \"install\" : \"add\"],\r\n          {\r\n            cwd,\r\n            /**@explain stdio: 'inherit' 설정의 주요 효과:\r\n부모 프로세스(현재 스크립트)와 자식 프로세스(npm install 명령어)의 입출력이 연결됩니다.\r\nnpm install의 실행 결과(메시지, 오류)가 콘솔에 그대로 출력됩니다.\r\n예를 들어, npm install 명령어가 터미널에서 실행될 때 보이는 메시지들이 현재 스크립트가 실행 중인 터미널에 그대로 표시됩니다.\r\n입력도 부모 프로세스와 공유되므로, 자식 프로세스에서도 동일한 입력을 받을 수 있습니다.\r\n예시 상황:\r\nstdio: 'inherit'가 설정된 상태에서 npm install을 실행하면, 설치 과정에서 출력되는 정보(진행 상황, 오류 메시지 등)가 현재 실행 중인 터미널에 실시간으로 표시됩니다.\r\nstdio: 'inherit'를 설정하지 않으면, 이러한 메시지가 터미널에 표시되지 않고 자식 프로세스 내에서만 처리됩니다. */\r\n            stdio: \"inherit\",\r\n          }\r\n        );\r\n        console.log(\r\n          kleur.green(\"@types/css-modules has been installed successfully.\")\r\n        );\r\n      } catch (err) {\r\n        console.log(\r\n          kleur.red(\r\n            \"Failed to `${projectPackageManager===npm ? install :add} @types/cs-mdoules\"\r\n          ),\r\n          err\r\n        );\r\n      }\r\n    }\r\n\r\n    console.log(kleur.green(`Created folders: ${uiPath}`));\r\n  } catch (err) {\r\n    console.error(\r\n      kleur.red(\"Failed to copy components or install @types/node:\"),\r\n      err\r\n    );\r\n  }\r\n}\r\n","import { detect } from \"@antfu/ni\";\r\nimport fg from \"fast-glob\";\r\nconst PROJECT_SHARED_IGNORE = [\r\n  \"**/node_modules/**\",\r\n  \".next\",\r\n  \"public\",\r\n  \"dist\",\r\n  \"build\",\r\n];\r\n\r\nexport async function getProjectPackageManager(\r\n  targetDir: string\r\n): Promise<\"yarn\" | \"pnpm\" | \"bun\" | \"npm\"> {\r\n  const packageManager = await detect({ programmatic: true, cwd: targetDir });\r\n  console.log(packageManager);\r\n  if (packageManager === \"yarn@berry\") return \"yarn\";\r\n  if (packageManager === \"pnpm@6\") return \"pnpm\";\r\n  if (packageManager === \"bun\") return \"bun\";\r\n\r\n  return packageManager ?? \"npm\";\r\n}\r\n\r\nexport async function isTypescriptProject(cwd: string) {\r\n  const files = await fg.glob(\"tsconfig.*\", {\r\n    cwd,\r\n    deep: 1,\r\n    ignore: PROJECT_SHARED_IGNORE,\r\n  });\r\n\r\n  return files.length > 0;\r\n}\r\n","import fs from \"fs-extra\";\r\nimport path from \"path\";\r\nimport { Jsonify } from \"type-fest\";\r\nimport { fileURLToPath } from \"url\";\r\n// 구체적인 타입 정의\r\ninterface ComponentFile {\r\n  name: string;\r\n  path: string;\r\n}\r\n\r\ninterface ComponentVersion {\r\n  files: ComponentFile[];\r\n}\r\n\r\nexport interface ComponentJson {\r\n  typescript: ComponentVersion;\r\n  javascript: ComponentVersion;\r\n}\r\n\r\n// ESM 환경에서 __dirname 대신 import.meta.url 사용\r\nconst __filename = fileURLToPath(import.meta.url);\r\nconst __dirname = path.dirname(__filename);\r\n\r\nexport function getComponentJSonInfo(): Jsonify<ComponentJson> {\r\n  // 현재 파일이 있는 경로에서 component.json 파일 경로 설정\r\n  const componentJsonPath = path.resolve(__dirname, \"component.json\");\r\n  return fs.readJSONSync(componentJsonPath) as Jsonify<ComponentJson>;\r\n}\r\n"],"mappings":"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","names":["Command","path","fs","getPackageInfo","packageJsonPath","readPackageJson","cwd","validateFramework","packageJson","dependencies","devDependencies","allDependencies","isReact","isNext","validation","path","detect","fg","PROJECT_SHARED_IGNORE","getProjectPackageManager","targetDir","packageManager","isTypescriptProject","cwd","kleur","fs","execa","init","component","filePathResolve","kleur","cwd","srcPath","path","componentsPath","uiPath","packageManager","packageJson","isTsx","getProjectPackageManager","readPackageJson","isTypescriptProject","dependency","devDependency","validateFramework","fileExtension","pathResolveKey","fs","files","file","sourcePath","destinationPath","err","fs","path","fileURLToPath","__filename","__dirname","getComponentJSonInfo","componentJsonPath","main","packageInfo","getPackageInfo","pathResolve","getComponentJSonInfo","program","Command","button","init"]}